#!/usr/bin/env wish9.0
package require cmdline
package require unix_sockets
package require zstatus::config
package require zstatus::desktop
package require zstatus::devices
package require zstatus::mail
package require zstatus::metar
package require zstatus::music
package require zstatus::system

# Unicodes characters from remixicons v4.6.0
array set remix {\
	clear_day	\uf1bf	clear_night	\uef75\
	cloud1_day	\uf1be	cloud1_night	\uef74\
	cloud2_day	\uf1bb	cloud2_night	\uef71\
	crystal		\uf574	dust		\ueba1\
	failed		\uebad	fog		\ued50\
	hail		\ueded	mail 		\ueef3\
	mixer 		\uf2a1	nometar		\ueb9f\
	overcast	\ueba3	pause 		\uf507\
	play 		\uef82	rain1		\uf056\
	rain2		\uec68	rain3		\uee15\
	snow		\uf15e	squall		\ueb9d\
	thunder		\uf209	tornado		\uf21c }

# Other unicode characters
set arrowup	\u2191
set arrowdown	\u2193

set widgetdict [dict create\
	arcsize {type lwidget source zstatus::system::arcsize\
		proc system::set_arcsize setup system::setup\
		font normal light black dark LightGray}\
	datetime {type string source zstatus::datetime proc set_datetime\
		format {%d %b %H:%M} font normal light black dark LightGray}\
	desklist {type lwidget source zstatus::desktop::desklist\
		setup desktop::setup font normal light black dark LightGray}\
	deskmode {type lwidget source zstatus::desktop::deskmode\
		setup desktop::setup font normal light black dark LightGray}\
	deskname {type lwidget source zstatus::desktop::deskname\
		setup desktop::setup font normal light black dark LightGray}\
	devices {type transient proc devices::update setup devices::setup\
		settheme devices::set_theme font normal light black dark LightGray}\
	loadavg {type lwidget source zstatus::system::loadavg\
		proc system::set_loadavg setup system::setup\
		font normal light black dark LightGray}\
	mail {type transient proc zstatus::mail::update\
		setup mail::setup settheme mail::set_theme\
		font normal light black dark LightGray}\
	memused {type lwidget source zstatus::system::memused\
		proc system::set_memused setup system::setup\
		font normal light black dark LightGray}\
	metar {type lwidget source zstatus::metar::report(statusbar)\
		setup metar::setup settheme metar::set_theme delay 10\
		font normal light black dark LightGray}\
	mixer {type lwidget source zstatus::system::mixer setup system::setup\
		font normal light black dark LightGray}\
	music {type transient proc music::update setup music::setup\
		settheme music::set_theme font normal light black dark LightGray}\
	netin {type lwidget source zstatus::system::netin\
		proc system::set_netin setup system::setup interface em0\
		font normal light black dark LightGray}\
	netout {type lwidget source zstatus::system::netout\
		proc system::set_netout setup system::setup interface em0\
		font normal light black dark LightGray}\
	sep {type separator light black dark gray}\
	separator {type separator light black dark gray}\
	statusbar {type bar light gray90 dark gray20}\
	wintitle {type twidget setup desktop::setup maxlength 110\
		font normal light black dark LightGray}]

set messagedict [dict create set_theme {action set_theme arg 1}]

namespace eval zstatus {
	variable currenttheme	none
	variable proclist	{}
}

proc zstatus::every {ms cmd} {
	after $ms [namespace code [info level 0]]
	eval $cmd
}

proc zstatus::map_window {window} {
	set rwidth [winfo vrootwidth .]
	set rheight [winfo vrootheight .]
	set width [winfo width $window]
	set height [winfo height $window]
	set xpos [expr [winfo pointerx .] - 5]
	set ypos [winfo pointery .]

	set right [expr $xpos + $width]
	if {$right >= $rwidth} {
		set xpos [expr $rwidth - $width - 2]
	}
	if {$xpos < 1} { set xpos 1 }

	set bottom [expr $ypos + $height]
	if {$bottom >= $rheight} {
		set ypos [expr $rheight - $height - 2]
	}

	set hbar [winfo height .]
	if [winfo rooty .] {
		set limit [expr $rooth - $hbar - $height - 1]
		if {$ypos > $limit} { set ypos $limit }
	} else {
		if {$ypos <= $hbar} { set ypos [expr $hbar + 1] }
	}

	wm geometry $window +$xpos+$ypos
}

proc zstatus::update {} {
	variable proclist
	foreach p $proclist { $p }
}

proc zstatus::set_theme {theme} {
	variable currenttheme
	if {$theme == $currenttheme} { return }
	set currenttheme $theme

	variable bar
	variable widgetlist
	set themebar [dict get $::widgetdict statusbar $currenttheme]

	set count 0
	$bar configure -background $themebar
	foreach item $widgetlist {
		switch [dict get $::widgetdict $item type] {
		bar {}
		transient {
			if [dict exists $::widgetdict $item settheme] {
				[dict get $::widgetdict $item settheme] $currenttheme
			}
		}
		separator {
			incr count
			$bar.$item$count configure\
				-background [dict get $::widgetdict $item $currenttheme]
		} 
		default {
			$bar.$item configure -bg $themebar\
				-fg [dict get $::widgetdict $item $currenttheme]
			if [dict exists $::widgetdict $item settheme] {
				[dict get $::widgetdict $item settheme] $currenttheme
			}
		}}
	}
}

proc zstatus::set_datetime {} {
	variable datetime
	variable datetime_format
	variable locale

	set datetime [clock format [clock seconds] \
		-locale $locale  -format $datetime_format]
}

proc zstatus::send_message {msg} {
	set xscreen [dict get $::config xscreen]
	set wmsocket [dict get $::config zwmsocket]

	if [catch {set channel [unix_sockets::connect $wmsocket]}] {
		puts stderr "Could not open socket $wmsocket!\n"
		return
	}
	puts $channel "$xscreen;$msg"
	close $channel
}

proc zstatus::read_message {channel} {
	if {[gets $channel line] < 0} {
		close $channel
		return
	}
	close $channel

	set line [string trimright $line]
	set equal [string first "=" $line]
	if {$equal == -1} {
		set key $line
		set value ""
	} elseif {$equal > 0} {
		set key [string range $line 0 $equal-1]
		set value [string range $line $equal+1 end]
	} else {
		return
	}

	if { ![dict exists $::messagedict $key] } { return }
	set action [dict get $::messagedict $key action]
	set arg [dict get $::messagedict $key arg]
	if {$arg == 1} {
		$action $value
	} else {
		$action
	}
}

proc zstatus::server_accept {channel} {
	chan configure $channel -buffering none -blocking 0
	chan event $channel readable [list zstatus::read_message $channel]
}

proc zstatus::add_widgets {side widgets} {
	variable bar
	variable proclist
	variable sepcount
	variable widgetlist

	# Sanitize the provided list
	regsub -all {\"} $widgets {} widgets
	regsub -all {,} $widgets { } widgets
	regsub -all {[ ]+} $widgets { } widgets

	set last $bar
	foreach item [split $widgets] {
		if ![dict exists $::widgetdict $item] { continue }
		switch [dict get $::widgetdict $item type] {
		lwidget {
			pack [label $bar.$item\
				-font [dict get $::widgetdict $item font]\
				-textvar [dict get $::widgetdict $item source]]\
				-side $side
			if [dict exists $::widgetdict $item setup] {
				[dict get $::widgetdict $item setup] $bar $item
			}
			set last $item
		}
		twidget {
			if ![dict exists $::widgetdict $item setup] {
				puts "No setup defined for $item!"
				exit 1
			}
			[dict get $::widgetdict $item setup] $bar $item
			pack $bar.$item -side $side -expand 1
			set last $item
		}
		string {
			pack [label $bar.$item\
				-font [dict get $::widgetdict $item font]\
				-textvar [dict get $::widgetdict $item source]]\
				-side $side
			set last $item
		}
		separator {
			incr sepcount
			pack [frame $bar.$item$sepcount -width 1]\
				-fill y -padx 5 -side $side
			set last $item$sepcount
		}
		transient {
			if [dict exists $::widgetdict $item setup] {
				[dict get $::widgetdict $item setup] $bar $last $side
			}
		}}

		if [dict exists $::widgetdict $item proc] {
			lappend proclist [dict get $::widgetdict $item proc]
		}
		lappend widgetlist $item
	}
}

proc zstatus::setup {} {
	variable bar
	variable widgetlist
	variable datetime_format
	variable locale
	variable sepcount

	set bar [frame .zstatus]
	pack $bar -fill both -expand 1
	set last $bar

	set sepcount 0
	set widgetlist {}
	add_widgets left [dict get $::config leftside]
	add_widgets right [dict get $::config rightside]

	set datetime_format [dict get $::widgetdict datetime format]
	set locale [dict get $::config lang]

	set theme ""
	if [dict exists $::config theme] {
		set theme [dict get $::config theme]
	} elseif [info exists ::params(theme)] {
		set theme $::params(theme)
	}
	if {$theme != "light" && $theme != "dark"} {
		set theme "light"
	}
	set_theme $theme
	zstatus::every [dict get $::config delay] zstatus::update
}

# Treat command line options
set options {
	{config.arg "default" "user configuration file"}
        {theme.arg  ""  "default theme"}
}
set usage ": zstatus.tk -config <configfile> -theme <theme> \n"

try {
	array set params [::cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
	puts $msg
	exit 1
}

# Setup tk app
tk appname "@PACKAGE_NAME@"
wm title . "@PACKAGE_NAME@ @PACKAGE_VERSION@"
set config [zstatus::config::read $params(config)]
dict set config xscreen [lindex [split [winfo screen .] "."] 1]
if ![dict exists $config geometry] {
	dict set config geometry "[winfo vrootwidth .]x26+0+0"
}
wm geometry . [dict get $config geometry]
wm attributes . -topmost 1 -type dock

set fontname [dict get $config fontname]
set fontsize [dict get $config fontsize]
set emojifontname [dict get $config emojifontname]
set emojifontsize [dict get $config emojifontsize]

font create normal -family $fontname -size $fontsize
font create italic -family $fontname -size $fontsize -slant italic
font create bold -family $fontname -size $fontsize -weight bold
font create emoji -family $emojifontname -size $emojifontsize

zstatus::setup
set listen [unix_sockets::listen [dict get $config barsocket] zstatus::server_accept]
vwait forever
