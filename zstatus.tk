#!/usr/bin/env wish9.0
package require cmdline
package require unix_sockets
package require zstatus::config
package require zstatus::devices
package require zstatus::mail
package require zstatus::metar
package require zstatus::music
package require zstatus::system

# Unicodes characters from remixicons v4.6.0
array set remix {
	clear_day	\uf1bf	clear_night	\uef75\
	cloud1_day	\uf1be	cloud1_night	\uef74\
	cloud2_day	\uf1bb	cloud2_night	\uef71\
	crystal		\uf574	dust		\ueba1\
	failed		\uebad	fog		\ued50\
	hail		\ueded	mail 		\ueef3\
	mixer 		\uf2a1	nometar		\ueb9f\
	overcast	\ueba3	pause 		\uf507\
	play 		\uef82	rain1		\uf056\
	rain2		\uec68	rain3		\uee15\
	snow		\uf15e	squall		\ueb9d\
	thunder		\uf209	tornado		\uf21c }

# Other unicode characters
set arrowup	\u2191
set arrowdown	\u2193

namespace eval zstatus {
	variable currenttheme	none
	variable proclist	{}
	array set modes {Monocle M VTiled V HTiled H Stacked S}

	# Array of messages that can be accepted
	array set messagearray {
	    window_active {widget wintitle action set_wintitle arg 1}\
	    no_window_active {widget wintitle action unset_wintitle arg 1}\
	    desktop_list {widget desklist action set_desklist arg 1}\
	    desktop_mode {widget deskmode action set_deskmode arg 1}\
	    desktop_name {widget deskname action set_deskname arg 1}\
	    mixer_volume {widget mixer action system::set_mixer arg 0}\
	    metar_window {widget metar action metar::toggle_window arg 0}\
	    metar_update {widget metar action metar::update arg 0}\
	    music_update {widget music action music::update arg 0}\
	    set_theme {widget none action set_theme arg 1}}
}

proc zstatus::every {ms cmd} {
	after $ms [namespace code [info level 0]]
	eval $cmd
}

proc zstatus::read_file {filename} {
	if [catch {open $filename} file] {
		puts $file
		return ""
	}
	set content [chan read $file]
	chan close $file
	return $content
}

proc zstatus::map_window {window} {
	set rwidth [winfo vrootwidth .]
	set rheight [winfo vrootheight .]
	set width [winfo width $window]
	set height [winfo height $window]
	set xpos [expr [winfo pointerx .] - 5]
	set ypos [winfo pointery .]

	set right [expr $xpos + $width]
	if {$right >= $rwidth} {
		set xpos [expr $rwidth - $width - 2]
	}
	if {$xpos < 1} { set xpos 1 }

	set bottom [expr $ypos + $height]
	if {$bottom >= $rheight} {
		set ypos [expr $rheight - $height - 2]
	}

	set hbar [winfo height .]
	if [winfo rooty .] {
		set limit [expr $rooth - $hbar - $height - 1]
		if {$ypos > $limit} { set ypos $limit }
	} else {
		if {$ypos <= $hbar} { set ypos [expr $hbar + 1] }
	}

	wm geometry $window +$xpos+$ypos
}

proc zstatus::update {} {
	variable proclist
	foreach p $proclist { $p }
}

proc zstatus::set_theme {theme} {
	variable currenttheme
	if {$theme == $currenttheme} { return }
	set currenttheme $theme

	variable bar
	variable widgetlist
	array set statusbar $::widgetarray(statusbar)

	set count 0
	$bar configure -background $statusbar($currenttheme)
	foreach item $widgetlist {
		array set widget $::widgetarray($item)
		if {$widget(type) == "widget"} {
			$bar.$item configure -bg $statusbar($currenttheme)\
					-fg $widget($currenttheme)
			if [info exists widget(settheme)] {
				$widget(settheme) $currenttheme
			}
		} elseif {$widget(type) == "transient"} {
			if [info exists widget(settheme)] {
				$widget(settheme) $currenttheme
			}
		} elseif {$widget(type) == "separator"} {
			incr count
			$bar.$item$count configure\
				-background $widget($currenttheme)
		} elseif {$widget(type) != "bar"} {
			$bar.$item configure -bg $statusbar($currenttheme)\
					-fg $widget($currenttheme)
		}
		array unset widget
	}
}

proc zstatus::set_wintitle {value} {
	array set widget $::widgetarray(wintitle)
	set length [tcl::mathfunc::min [string length $value] $widget(maxlength)]
	variable wintitle
	$wintitle configure -state normal
	$wintitle delete 1.0 end
	$wintitle configure -width $length
	$wintitle insert 1.0 $value
	foreach i [$wintitle search -all \
		-regexp {[\u2000-\u28ff\U1f000-\U1faff]} 1.0 end] {
		$wintitle tag add emoji $i
	}
	$wintitle configure -state disabled
}

proc zstatus::unset_wintitle {value} {
	variable wintitle
	$wintitle configure -state normal
	$wintitle delete 1.0 end
	$wintitle configure -state disabled
}

proc zstatus::set_desklist {value} {
	variable desklist
	set desklist $value
}

proc zstatus::set_deskmode {value} {
	variable modes
	variable deskmode
	if [info exists modes($value)] {
		set deskmode " $modes($value)"
	} else {
		set deskmode " $value"
	}
}

proc zstatus::set_deskname {value} {
	variable deskname
	set deskname $value
}

proc zstatus::set_datetime {} {
	variable datetime
	array set widget $::widgetarray(datetime)
	set datetime [clock format [clock seconds] \
		-locale $::config(lang) -format $widget(format)]
}

proc zstatus::send_message {msg} {
	set xscreen $::config(xscreen)
	set wmsocket $::config(zwmsocket)

	if [catch {set channel [unix_sockets::connect $wmsocket]}] {
		puts stderr "Could not open socket $wmsocket!\n"
		return
	}
	puts $channel "$xscreen;$msg"
	close $channel
}

proc zstatus::server_accept {channel} {
	chan configure $channel -buffering none -blocking 0
	chan event $channel readable [list zstatus::read_message $channel]
}

proc zstatus::read_message {channel} {
	if {[gets $channel line] < 0} {
		close $channel
		return
	}
	close $channel

	set line [string trimright $line]
	set equal [string first "=" $line]
	if {$equal == -1} {
		set key $line
		set value ""
	} elseif {$equal > 0} {
		set key [string range $line 0 $equal-1]
		set value [string range $line $equal+1 end]
	} else {
		return
	}

	variable messagearray
	if { ![info exists messagearray($key)] } { return }
	variable bar
	array set selected $messagearray($key)
	if {$selected(widget)=="none" || [winfo exists $bar.$selected(widget)]} {
		if {$selected(arg) == 1} {
			$selected(action) $value
		} else {
			$selected(action)
		}
	}
}

proc zstatus::add_widgets {side widgets} {
	variable bar
	variable proclist
	variable sepcount
	variable widgetlist

	# Sanitize the provided list
	regsub -all {\"} $widgets {} widgets
	regsub -all {,} $widgets { } widgets
	regsub -all {[ ]+} $widgets { } widgets

	foreach item [split $widgets] {
		if ![info exists ::widgetarray($item)] { continue }
		array set widget $::widgetarray($item)
		switch $widget(type) {
			label {
				pack [label $bar.$item -font $widget(font)\
					-text $widget(source)] -side $side
				set last $item
			}
			text {
				variable $widget(ref)
				set $widget(ref) [text $bar.$item\
					-font $widget(font)\
					-height 1 -borderwidth 0\
					-highlightthickness 0 -wrap word]
				$bar.$item tag configure emoji -font emoji
				pack $bar.$item -side $side -expand 1
				$bar.$item configure -state disabled
				set last $item
			}
			var {
				pack [label $bar.$item -font $widget(font)\
					-textvar $widget(source)] -side $side
				set last $item
			}
			separator {
				incr sepcount
				pack [frame $bar.$item$sepcount -width 1]\
					-fill y -padx 5 -side $side
				set last $item$sepcount
			}
			transient {
				if [info exists widget(setup)] {
					$widget(setup) $bar $last $side
				}
			}
			widget {
				pack [label $bar.$item -font $widget(font)\
					-textvar $widget(source)] -side $side
				if [info exists widget(setup)] {
					$widget(setup) $bar $item
				}
				set last $item
			}
		}
		if [info exists widget(proc)] {
			lappend proclist $widget(proc)
		}
		lappend widgetlist $item
		array unset widget
	}
}

# Setup the statusbar
proc zstatus::setup {} {
	variable bar
	variable widgetlist
	variable sepcount

	set bar [frame .zstatus]
	pack $bar -fill both -expand 1
	set last $bar

	set sepcount 0
	set widgetlist {}
	add_widgets left $::config(leftside)
	add_widgets right $::config(rightside)

	if [winfo exists $bar.deskmode] {
		bind $bar.deskmode <MouseWheel> {
			if {%D < 0} {
				zstatus::send_message "desktop-mode-next"
			} else {
				zstatus::send_message "desktop-mode-prev"
			}
		}
	}
	if [winfo exists $bar.desklist] {
		bind $bar.desklist <MouseWheel> {
			if {%D < 0} {
				zstatus::send_message "desktop-switch-next"
			} else {
				zstatus::send_message "desktop-switch-prev"
			}
		}
	}

	set theme ""
	if [info exists ::config(theme)] {
		set theme $::config(theme)
	} elseif [info exists ::params(theme)] {
		set theme $::params(theme)
	}
	if {$theme != "light" && $theme != "dark"} {
		set theme "light"
	}
	set_theme $theme
	zstatus::every $::config(delay) zstatus::update
}

# Treat command line options
set options {
	{config.arg "default" "user configuration file"}
        {theme.arg  ""  "default theme"}
}
set usage ": zstatus.tk -config <configfile> -theme <theme> \n"

try {
	array set params [::cmdline::getoptions argv $options $usage]
} trap {CMDLINE USAGE} {msg o} {
	puts $msg
	exit 1
}

# Setup tk app
tk appname "@PACKAGE_NAME@"
wm title . "@PACKAGE_NAME@ @PACKAGE_VERSION@"
array set config [zstatus::config::read $params(config)]
array set widgetarray $::config(widgets)
set config(xscreen) [lindex [split [winfo screen .] "."] 1]
if ![info exists config(geometry)] {
	set config(geometry) "[winfo vrootwidth .]x26+0+0"
}
wm geometry . $config(geometry)
wm attributes . -topmost 1 -type dock
font create normal -family $config(fontname) -size $config(fontsize)
font create italic -family $config(fontname) -size $config(fontsize) -slant italic
font create bold -family $config(fontname) -size $config(fontsize) -weight bold
font create emoji -family $config(emojifontname) -size $config(emojifontsize)

zstatus::setup
set listen [unix_sockets::listen $config(barsocket) zstatus::server_accept]
vwait forever
